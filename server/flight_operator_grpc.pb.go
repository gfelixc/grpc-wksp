// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package flight

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FlightOperatorClient is the client API for FlightOperator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlightOperatorClient interface {
	FlightDetails(ctx context.Context, in *FlightDetailsRequest, opts ...grpc.CallOption) (*FlightDetailsResponse, error)
	Departures(ctx context.Context, in *DeparturesRequest, opts ...grpc.CallOption) (FlightOperator_DeparturesClient, error)
	TravelUpdates(ctx context.Context, opts ...grpc.CallOption) (FlightOperator_TravelUpdatesClient, error)
	SupportChat(ctx context.Context, opts ...grpc.CallOption) (FlightOperator_SupportChatClient, error)
}

type flightOperatorClient struct {
	cc grpc.ClientConnInterface
}

func NewFlightOperatorClient(cc grpc.ClientConnInterface) FlightOperatorClient {
	return &flightOperatorClient{cc}
}

func (c *flightOperatorClient) FlightDetails(ctx context.Context, in *FlightDetailsRequest, opts ...grpc.CallOption) (*FlightDetailsResponse, error) {
	out := new(FlightDetailsResponse)
	err := c.cc.Invoke(ctx, "/FlightOperator/FlightDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightOperatorClient) Departures(ctx context.Context, in *DeparturesRequest, opts ...grpc.CallOption) (FlightOperator_DeparturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FlightOperator_serviceDesc.Streams[0], "/FlightOperator/Departures", opts...)
	if err != nil {
		return nil, err
	}
	x := &flightOperatorDeparturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlightOperator_DeparturesClient interface {
	Recv() (*DeparturesResponse, error)
	grpc.ClientStream
}

type flightOperatorDeparturesClient struct {
	grpc.ClientStream
}

func (x *flightOperatorDeparturesClient) Recv() (*DeparturesResponse, error) {
	m := new(DeparturesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flightOperatorClient) TravelUpdates(ctx context.Context, opts ...grpc.CallOption) (FlightOperator_TravelUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FlightOperator_serviceDesc.Streams[1], "/FlightOperator/TravelUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &flightOperatorTravelUpdatesClient{stream}
	return x, nil
}

type FlightOperator_TravelUpdatesClient interface {
	Send(*TravelUpdatesRequest) error
	CloseAndRecv() (*TravelUpdatesResponse, error)
	grpc.ClientStream
}

type flightOperatorTravelUpdatesClient struct {
	grpc.ClientStream
}

func (x *flightOperatorTravelUpdatesClient) Send(m *TravelUpdatesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *flightOperatorTravelUpdatesClient) CloseAndRecv() (*TravelUpdatesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TravelUpdatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flightOperatorClient) SupportChat(ctx context.Context, opts ...grpc.CallOption) (FlightOperator_SupportChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FlightOperator_serviceDesc.Streams[2], "/FlightOperator/SupportChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &flightOperatorSupportChatClient{stream}
	return x, nil
}

type FlightOperator_SupportChatClient interface {
	Send(*SupportChatRequest) error
	Recv() (*SupportChatResponse, error)
	grpc.ClientStream
}

type flightOperatorSupportChatClient struct {
	grpc.ClientStream
}

func (x *flightOperatorSupportChatClient) Send(m *SupportChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *flightOperatorSupportChatClient) Recv() (*SupportChatResponse, error) {
	m := new(SupportChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FlightOperatorServer is the server API for FlightOperator service.
// All implementations must embed UnimplementedFlightOperatorServer
// for forward compatibility
type FlightOperatorServer interface {
	FlightDetails(context.Context, *FlightDetailsRequest) (*FlightDetailsResponse, error)
	Departures(*DeparturesRequest, FlightOperator_DeparturesServer) error
	TravelUpdates(FlightOperator_TravelUpdatesServer) error
	SupportChat(FlightOperator_SupportChatServer) error
	mustEmbedUnimplementedFlightOperatorServer()
}

// UnimplementedFlightOperatorServer must be embedded to have forward compatible implementations.
type UnimplementedFlightOperatorServer struct {
}

func (UnimplementedFlightOperatorServer) FlightDetails(context.Context, *FlightDetailsRequest) (*FlightDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlightDetails not implemented")
}
func (UnimplementedFlightOperatorServer) Departures(*DeparturesRequest, FlightOperator_DeparturesServer) error {
	return status.Errorf(codes.Unimplemented, "method Departures not implemented")
}
func (UnimplementedFlightOperatorServer) TravelUpdates(FlightOperator_TravelUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method TravelUpdates not implemented")
}
func (UnimplementedFlightOperatorServer) SupportChat(FlightOperator_SupportChatServer) error {
	return status.Errorf(codes.Unimplemented, "method SupportChat not implemented")
}
func (UnimplementedFlightOperatorServer) mustEmbedUnimplementedFlightOperatorServer() {}

// UnsafeFlightOperatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlightOperatorServer will
// result in compilation errors.
type UnsafeFlightOperatorServer interface {
	mustEmbedUnimplementedFlightOperatorServer()
}

func RegisterFlightOperatorServer(s *grpc.Server, srv FlightOperatorServer) {
	s.RegisterService(&_FlightOperator_serviceDesc, srv)
}

func _FlightOperator_FlightDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightOperatorServer).FlightDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FlightOperator/FlightDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightOperatorServer).FlightDetails(ctx, req.(*FlightDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightOperator_Departures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeparturesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlightOperatorServer).Departures(m, &flightOperatorDeparturesServer{stream})
}

type FlightOperator_DeparturesServer interface {
	Send(*DeparturesResponse) error
	grpc.ServerStream
}

type flightOperatorDeparturesServer struct {
	grpc.ServerStream
}

func (x *flightOperatorDeparturesServer) Send(m *DeparturesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FlightOperator_TravelUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FlightOperatorServer).TravelUpdates(&flightOperatorTravelUpdatesServer{stream})
}

type FlightOperator_TravelUpdatesServer interface {
	SendAndClose(*TravelUpdatesResponse) error
	Recv() (*TravelUpdatesRequest, error)
	grpc.ServerStream
}

type flightOperatorTravelUpdatesServer struct {
	grpc.ServerStream
}

func (x *flightOperatorTravelUpdatesServer) SendAndClose(m *TravelUpdatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *flightOperatorTravelUpdatesServer) Recv() (*TravelUpdatesRequest, error) {
	m := new(TravelUpdatesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FlightOperator_SupportChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FlightOperatorServer).SupportChat(&flightOperatorSupportChatServer{stream})
}

type FlightOperator_SupportChatServer interface {
	Send(*SupportChatResponse) error
	Recv() (*SupportChatRequest, error)
	grpc.ServerStream
}

type flightOperatorSupportChatServer struct {
	grpc.ServerStream
}

func (x *flightOperatorSupportChatServer) Send(m *SupportChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *flightOperatorSupportChatServer) Recv() (*SupportChatRequest, error) {
	m := new(SupportChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FlightOperator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FlightOperator",
	HandlerType: (*FlightOperatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FlightDetails",
			Handler:    _FlightOperator_FlightDetails_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Departures",
			Handler:       _FlightOperator_Departures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TravelUpdates",
			Handler:       _FlightOperator_TravelUpdates_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SupportChat",
			Handler:       _FlightOperator_SupportChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "flight_operator.proto",
}
